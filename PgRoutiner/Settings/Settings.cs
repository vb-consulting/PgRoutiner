using System;
using System.Collections;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace PgRoutiner
{
    public class Switches
    {
        public bool Help { get; set; } = false;
        public bool Settings { get; set; } = false;
        public bool Debug { get; set; } = false;

        public static readonly Switches Value = new Switches();
    }

    public class Arg
    {
        public string Alias { get; }
        public string Name { get; }
        public string Original { get; }

        public Arg(string alias, string name)
        {
            Alias = alias;
            Name = $"--{name.ToLower()}";
            Original = name;
        }
    }

    public partial class Settings
    {
        public static readonly Arg DirArgs = new("-dir", "dir");
        public static readonly Arg HelpArgs = new("-h", "help");
        public static readonly Arg SettingsArgs = new("-s", "settings");
        public static readonly Arg RunArgs = new("-r", nameof(Run));
        public static readonly Arg CommitCommentsArgs = new("-cc", nameof(CommitComments));
        public static readonly Arg ExecuteArgs = new("-x", nameof(Execute));
        public static readonly Arg DumpArgs = new("-d", nameof(Dump));
        public static readonly Arg DebugArgs = new("-dbg", "debug");
        public static readonly Arg ConnectionArgs = new("-c", nameof(Connection));
        public static readonly Arg SchemaArgs = new("-sch", nameof(Schema));
        public static readonly Arg OverwriteArgs = new("-ow", nameof(Overwrite));
        public static readonly Arg AskOverwriteArgs = new("-aow", nameof(AskOverwrite));
        public static readonly Arg PgDumpArgs = new("-pgdump", nameof(PgDump));
        public static readonly Arg OutputDirArgs = new("-o", nameof(OutputDir));
        public static readonly Arg NotSimilarToArgs = new("-nst", nameof(NotSimilarTo));
        public static readonly Arg SimilarToArgs = new("-st", nameof(SimilarTo));
        public static readonly Arg SkipSyncMethodsArgs = new("-ss", nameof(SkipSyncMethods));
        public static readonly Arg SkipAsyncMethodsArgs = new("-sa", nameof(SkipAsyncMethods));
        public static readonly Arg ModelDirArgs = new("-md", nameof(ModelDir));
        public static readonly Arg UseRecordsArgs = new("-ur", nameof(UseRecords));
        public static readonly Arg SchemaDumpFileArgs = new("-sdf", nameof(SchemaDumpFile));
        public static readonly Arg DataDumpFileArgs = new("-ddf", nameof(DataDumpFile));
        public static readonly Arg DbObjectsDirArgs = new("-dbd", nameof(DbObjectsDir));
        public static readonly Arg CommentsMdFileArgs = new("-mdf", nameof(CommentsMdFile));

        [JsonIgnore] public string Project { get; set; }
        [JsonIgnore] public bool Run { get; set; } = false;
        [JsonIgnore] public bool Dump { get; set; } = false;
        [JsonIgnore] public string Execute { get; set; } = null;

        /*general*/
        public string Connection { get; set; } = null;
        public string Schema { get; set; } = null;
        public bool Overwrite { get; set; } = false;
        public bool AskOverwrite { get; set; } = false;
        public IList<string> SkipIfExists { get; set; } = new List<string>();
        public string MinNormVersion { get; set; } = "3.1.2";
        public bool SkipUpdateReferences { get; set; } = false;
        public int Ident { get; set; } = 4;
        public string PgDump { get; set; } = "pg_dump";
        public string SourceHeader { get; set; } = "// <auto-generated />";

        /*routines data-access extensions*/
        public string OutputDir { get; set; } = null;
        public string Namespace { get; set; } = null;
        public string NotSimilarTo { get; set; } = null;
        public string SimilarTo { get; set; } = null;
        public bool SkipSyncMethods { get; set; } = false;
        public bool SkipAsyncMethods { get; set; } = false;
        public string ModelDir { get; set; } = null;
        public IDictionary<string, string> Mapping { get; set; } = new Dictionary<string, string>();
        public IDictionary<string, string> CustomModels { get; set; } = new Dictionary<string, string>();
        public bool UseRecords { get; set; } = false;

        /*schema dump*/
        public string SchemaDumpFile { get; set; } = null;
        public bool SchemaDumpOwners { get; set; } = false;
        public bool SchemaDumpPrivileges { get; set; } = false;
        public bool SchemaDumpNoDropIfExists { get; set; } = false;
        public string SchemaDumpOptions { get; set; } = null;
        public bool SchemaDumpNoTransaction { get; set; } = false;

        /*data dump*/
        public string DataDumpFile { get; set; } = null;
        public IList<string> DataDumpTables { get; set; } = new List<string>();
        public string DataDumpOptions { get; set; } = null;
        public bool DataDumpNoTransaction { get; set; } = false;

        /*object tree*/
        public string DbObjectsDir { get; set; } = null;
        public IDictionary<string, string> DbObjectsDirNames { get; set; } = new Dictionary<string, string>() 
        {   
            { "Tables", "Tables" }, { "Views", "Views" }, { "Functions", "Functions" }, { "Procedures", "Procedures" }
        };
        public bool DbObjectsSkipDelete { get; set; } = false;
        public bool DbObjectsOwners { get; set; } = false;
        public bool DbObjectsPrivileges { get; set; } = false;
        public bool DbObjectsDropIfExists { get; set; } = false;
        public bool DbObjectsNoCreateOrReplace { get; set; } = false;
        public bool DbObjectsRaw { get; set; } = false;

        /*comments markdown file*/
        public string CommentsMdFile { get; set; } = null;
        public bool CommentsMdSkipRoutines { get; set; } = false;
        public bool CommentsMdSkipViews { get; set; } = false;
        public string CommentsMdNotSimilarTo { get; set; } = null;
        public string CommentsMdSimilarTo { get; set; } = null;
        [JsonIgnore] public bool CommitComments { get; set; } = false;

        public static readonly Settings Value = new Settings();
    }
}
